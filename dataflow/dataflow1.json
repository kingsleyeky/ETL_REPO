{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "OrderDataset_RestApiwithDataFlow",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OrderTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "flatten4"
				},
				{
					"name": "flatten5"
				},
				{
					"name": "flatten6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (balanceDueAmount as boolean, businessDate as date, checks as (autoGratuityTaxes as string[], balanceAmount as boolean, gratuityAmount as boolean, guests as (items as (createdAt as timestamp, discounts as (amount as double, authUserId as string, authUserName as string, createdAt as timestamp, discountId as string, discountName as string, discountReason as string, id as string)[], discountsAmount as double, giftCardIssueReload as boolean, menuItemId as string, modifiers as (discounts as (amount as short, authUserId as string, authUserName as string, createdAt as timestamp, discountId as string, discountName as string, discountReason as string, id as string)[], discountsAmount as short, modifierId as string, modifierOptionId as string, postDiscountsAmount as double, preDiscountsAmount as double, taxes as (amount as double, isInclusive as boolean, percentage as double, taxId as string, taxName as string)[], taxesAmount as double, text as string, totalAmount as double)[], name as string, postDiscountsAmount as double, preDiscountsAmount as double, quantity as short, subItems as (createdAt as timestamp, discounts as string[], discountsAmount as boolean, giftCardIssueReload as boolean, menuItemId as string, modifiers as string[], name as string, postDiscountsAmount as boolean, preDiscountsAmount as boolean, quantity as boolean, subItems as string[], taxes as (amount as boolean, isInclusive as boolean, percentage as double, taxId as string, taxName as string)[], taxesAmount as boolean, totalAmount as boolean, void as string)[], taxes as (amount as double, isInclusive as boolean, percentage as double, taxId as string, taxName as string)[], taxesAmount as double, totalAmount as double, void as string)[], name as string, voidedItems as (createdAt as timestamp, discounts as string[], discountsAmount as boolean, giftCardIssueReload as boolean, menuItemId as string, modifiers as (discounts as string[], discountsAmount as boolean, modifierId as string, modifierOptionId as string, postDiscountsAmount as boolean, preDiscountsAmount as boolean, taxes as (amount as boolean, isInclusive as boolean, percentage as double, taxId as string, taxName as string)[], taxesAmount as boolean, text as string, totalAmount as boolean)[], name as string, postDiscountsAmount as boolean, preDiscountsAmount as boolean, quantity as boolean, subItems as string[], taxes as (amount as boolean, isInclusive as boolean, percentage as double, taxId as string, taxName as string)[], taxesAmount as boolean, totalAmount as boolean, void as (amount as double, authUserId as string, authUserName as string, voidComment as string, voidReason as string, voidedAt as timestamp))[])[], items as string[], payments as (amount as double, businessDate as date, cardNumber as string, cardType as string, cardholderName as string, createdAt as timestamp, employeeId as string, employeeName as string, paymentName as string, paymentOptionId as string, stationId as string, surcharges as string[], surchargesAmount as boolean, tipAmount as double, tipAppliedToEmployeeId as string, tipDeductionAmount as boolean)[], paymentsAmount as double, surcharges as string[], totalAmount as double, voidedItems as string[])[], closedAt as timestamp, createdAt as timestamp, createdByEmployeeId as string, createdByEmployeeName as string, customer as (phone as string), dayPart as string, deleted as boolean, id as string, locationId as string, name as string, orderNumber as integer, orderTypeId as string, orderTypeName as string, ownerInfo as (employeeId as string, employeeName as string, jobPositionId as string), releasedAt as string, scheduled as boolean, tableNumber as string, teamId as string, totalAmount as double, updatedAt as string),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     headers: ['x-api-key' -> 'ae26019c-3cf9-4700-bcd1-c57975060532'],",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source1",
				"source1 foldDown(unroll(body.checks),",
				"     mapColumn(",
				"          balanceDueAmount = body.balanceDueAmount,",
				"          businessDate = body.businessDate,",
				"          closedAt = body.closedAt,",
				"          createdAt = body.createdAt,",
				"          createdByEmployeeId = body.createdByEmployeeId,",
				"          createdByEmployeeName = body.createdByEmployeeName,",
				"          customer = body.customer,",
				"          dayPart = body.dayPart,",
				"          deleted = body.deleted,",
				"          id = body.id,",
				"          locationId = body.locationId,",
				"          name = body.name,",
				"          orderNumber = body.orderNumber,",
				"          orderTypeId = body.orderTypeId,",
				"          orderTypeName = body.orderTypeName,",
				"          ownerInfo = body.ownerInfo,",
				"          releasedAt = body.releasedAt,",
				"          scheduled = body.scheduled,",
				"          tableNumber = body.tableNumber,",
				"          teamId = body.teamId,",
				"          totalAmount = body.totalAmount,",
				"          updatedAt = body.updatedAt,",
				"          employeeId = body.ownerInfo.employeeId,",
				"          employeeName = body.ownerInfo.employeeName,",
				"          phone = body.customer.phone,",
				"          jobPositionId = body.ownerInfo.jobPositionId,",
				"          guests = body.checks.guests,",
				"          payments = body.checks.payments,",
				"          items = body.checks.items",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 foldDown(unroll(guests),",
				"     mapColumn(",
				"          balanceDueAmount,",
				"          businessDate,",
				"          closedAt,",
				"          createdAt,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          customer_phone = customer.phone,",
				"          dayPart,",
				"          deleted,",
				"          id,",
				"          locationId,",
				"          name,",
				"          orderNumber,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          Ownerinfo_employeeId = ownerInfo.employeeId,",
				"          Ownerinfo_employeeName = ownerInfo.employeeName,",
				"          Ownerinfo_jobPositionId = ownerInfo.jobPositionId,",
				"          releasedAt,",
				"          scheduled,",
				"          tableNumber,",
				"          teamId,",
				"          totalAmount,",
				"          updatedAt,",
				"          employeeId,",
				"          employeeName,",
				"          phone,",
				"          jobPositionId,",
				"          guests,",
				"          payments",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 foldDown(unroll(guests.items),",
				"     mapColumn(",
				"          balanceDueAmount,",
				"          businessDate,",
				"          closedAt,",
				"          createdAt,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          customer_phone,",
				"          dayPart,",
				"          deleted,",
				"          id,",
				"          locationId,",
				"          name,",
				"          orderNumber,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          Ownerinfo_employeeId,",
				"          Ownerinfo_employeeName,",
				"          Ownerinfo_jobPositionId,",
				"          releasedAt,",
				"          scheduled,",
				"          tableNumber,",
				"          teamId,",
				"          totalAmount,",
				"          updatedAt,",
				"          employeeId,",
				"          employeeName,",
				"          phone,",
				"          jobPositionId,",
				"          guests_items_createdAt = guests.items.createdAt,",
				"          discountsAmount = guests.items.discountsAmount,",
				"          authUserId = guests.items.giftCardIssueReload,",
				"          menuItemId = guests.items.menuItemId,",
				"          guests_items_name = guests.items.name,",
				"          postDiscountsAmount = guests.items.postDiscountsAmount,",
				"          preDiscountsAmount = guests.items.preDiscountsAmount,",
				"          guests_items_quantity = guests.items.quantity,",
				"          taxesAmount = guests.items.taxesAmount,",
				"          items_balanceDueAmount = balanceDueAmount,",
				"          items_totalAmount = guests.items.totalAmount,",
				"          modifiers = guests.items.modifiers,",
				"          items_taxes = guests.items.taxes,",
				"          payments",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"flatten3 foldDown(unroll(modifiers),",
				"     mapColumn(",
				"          modifiers_discountsAmount = modifiers.discountsAmount,",
				"          modifierId = modifiers.modifierId,",
				"          modifierOptionId = modifiers.modifierOptionId,",
				"          modifiers_postDiscountsAmount = modifiers.postDiscountsAmount,",
				"          modifiers_preDiscountsAmount = modifiers.preDiscountsAmount,",
				"          modifiers_taxesAmount = modifiers.taxesAmount,",
				"          text = modifiers.text,",
				"          modifier_totalAmount = modifiers.totalAmount,",
				"          balanceDueAmount,",
				"          businessDate,",
				"          closedAt,",
				"          createdAt,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          customer_phone,",
				"          dayPart,",
				"          deleted,",
				"          id,",
				"          locationId,",
				"          name,",
				"          orderNumber,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          Ownerinfo_employeeId,",
				"          Ownerinfo_employeeName,",
				"          Ownerinfo_jobPositionId,",
				"          releasedAt,",
				"          scheduled,",
				"          tableNumber,",
				"          teamId,",
				"          totalAmount,",
				"          updatedAt,",
				"          employeeId,",
				"          employeeName,",
				"          phone,",
				"          jobPositionId,",
				"          guests_items_createdAt,",
				"          discountsAmount,",
				"          authUserId,",
				"          menuItemId,",
				"          guests_items_name,",
				"          postDiscountsAmount,",
				"          preDiscountsAmount,",
				"          guests_items_quantity,",
				"          taxesAmount,",
				"          items_balanceDueAmount,",
				"          items_totalAmount,",
				"          modifiers_taxes = modifiers.taxes,",
				"          payments",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten4",
				"flatten4 foldDown(unroll(modifiers_taxes),",
				"     mapColumn(",
				"          amount = modifiers_taxes.amount,",
				"          isInclusive = modifiers_taxes.isInclusive,",
				"          percentage = modifiers_taxes.percentage,",
				"          taxId = modifiers_taxes.taxId,",
				"          taxName = modifiers_taxes.taxName,",
				"          modifiers_discountsAmount,",
				"          modifierId,",
				"          modifierOptionId,",
				"          modifiers_postDiscountsAmount,",
				"          modifiers_preDiscountsAmount,",
				"          modifiers_taxesAmount,",
				"          text,",
				"          modifier_totalAmount,",
				"          balanceDueAmount,",
				"          businessDate,",
				"          closedAt,",
				"          createdAt,",
				"          createdByEmployeeId,",
				"          createdByEmployeeName,",
				"          customer_phone,",
				"          dayPart,",
				"          deleted,",
				"          id,",
				"          locationId,",
				"          name,",
				"          orderNumber,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          Ownerinfo_employeeId,",
				"          Ownerinfo_employeeName,",
				"          Ownerinfo_jobPositionId,",
				"          releasedAt,",
				"          scheduled,",
				"          tableNumber,",
				"          teamId,",
				"          totalAmount,",
				"          updatedAt,",
				"          employeeId,",
				"          employeeName,",
				"          phone,",
				"          jobPositionId,",
				"          guests_items_createdAt,",
				"          discountsAmount,",
				"          authUserId,",
				"          menuItemId,",
				"          guests_items_name,",
				"          postDiscountsAmount,",
				"          preDiscountsAmount,",
				"          items_quantity = guests_items_quantity,",
				"          taxesAmount,",
				"          items_balanceDueAmount,",
				"          items_totalAmount,",
				"          payments",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten5",
				"flatten5 foldDown(unroll(payments),",
				"     mapColumn(",
				"          id,",
				"          menuItemId,",
				"          payments_amount = payments.amount,",
				"          payments_employeeId = payments.employeeId,",
				"          payments_businessDate = payments.businessDate,",
				"          cardNumber = payments.cardNumber,",
				"          cardType = payments.cardType,",
				"          cardholderName = payments.cardholderName,",
				"          payments_createdAt = payments.createdAt,",
				"          payments_employeeName = payments.employeeName,",
				"          paymentName = payments.paymentName,",
				"          paymentOptionId = payments.paymentOptionId,",
				"          stationId = payments.stationId,",
				"          tipAmount = payments.tipAmount,",
				"          tipAppliedToEmployeeId = payments.tipAppliedToEmployeeId,",
				"          tipDeductionAmount = payments.tipDeductionAmount,",
				"          amount,",
				"          isInclusive,",
				"          percentage,",
				"          taxId,",
				"          taxName,",
				"          modifiers_discountsAmount,",
				"          modifierId,",
				"          modifierOptionId,",
				"          modifiers_postDiscountsAmount,",
				"          modifiers_preDiscountsAmount,",
				"          modifiers_taxesAmount,",
				"          text,",
				"          modifier_totalAmount,",
				"          balanceDueAmount,",
				"          businessDate,",
				"          closedAt,",
				"          createdAt,",
				"          createdByEmployeeId,",
				"          CreatedBy_Ownerinfo_employeeName = createdByEmployeeName,",
				"          customer_phone,",
				"          dayPart,",
				"          deleted,",
				"          locationId,",
				"          name,",
				"          orderNumber,",
				"          orderTypeId,",
				"          orderTypeName,",
				"          Ownerinfo_employeeId,",
				"          Ownerinfo_employeeName,",
				"          Ownerinfo_jobPositionId,",
				"          releasedAt,",
				"          scheduled,",
				"          tableNumber,",
				"          teamId,",
				"          totalAmount,",
				"          updatedAt,",
				"          employeeId,",
				"          employeeName,",
				"          phone,",
				"          jobPositionId,",
				"          guests_items_createdAt,",
				"          discountsAmount,",
				"          authUserId,",
				"          guests_items_name,",
				"          postDiscountsAmount,",
				"          preDiscountsAmount,",
				"          items_quantity,",
				"          taxesAmount,",
				"          items_balanceDueAmount,",
				"          items_totalAmount",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten6",
				"flatten6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as string,",
				"          BusinessDate as string,",
				"          BalanceDueAmount as long,",
				"          ClosedAt as timestamp,",
				"          CreatedAt as timestamp,",
				"          CreatedByEmployeeId as string,",
				"          CreatedByEmployeeName as string,",
				"          CustomerId as string,",
				"          DayPart as string,",
				"          Deleted as boolean,",
				"          LocationId as string,",
				"          Name as string,",
				"          OrderNumber as string,",
				"          OrderTypeId as string,",
				"          OrderTypeName as string,",
				"          ReleasedAt as timestamp,",
				"          Scheduled as boolean,",
				"          TableNumber as string,",
				"          TeamId as string,",
				"          TotalAmount as long,",
				"          UpdatedAt as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}